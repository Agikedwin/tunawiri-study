===========JAVA HOME===========
https://www.linuxshelltips.com/set-java_home-path-ubuntu/
sudo apt install openjdk-11-jdk-headless
export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
echo $JAVA_HOME
==================MAVEN HOME=================
https://linuxize.com/post/how-to-install-apache-maven-on-ubuntu-20-04/
=========================================================


Zipkin port :9411
command:
docker run -d -p 9411:9411 openzipkin/zipkin

run image:
docker run -p 8000:8000 agikedwin/pv1-prep-login:0.0.1-SNAPSHOT

remove:docker image rm -f 6b8938d7c327

===================CREATE IMAGES FROM JAVA SPRING BOOT MVN=========================
mvn spring-boot:build-image -DskipTests
============CREATE IMAGES CLIENT VUE JS============
  to create docker image locally :run in the client dir
  docker-compose up --build 

Activate permission
sudo usermod -aG docker $USER
sudo usermod -aG docker $USER 
sudo chmod 755 /var/run/docker.sock


MYSQL:
docker stop db && docker rm db
$ docker run  --name agikedwin/pv1-prep-login:0.0.1-SNAPSHOT -e MYSQL_ROOT_PASSWORD=<[agik]>  -e MYSQL_DATABASE="concept_prep" --network=prep-login-network  -p 3306:3306 -d  mysql

==============new=============
mysql image : docker run -p 3307:3306 --name mysqldb -e MYSQL_ROOT_PASSWORD=[agik] MYSQL_DATABASE=concept_prep mysql
build image: docker build -t prep-login .

remove all images:
sudo docker system prune -a --volumes
spri
sudo docker rmi -f $(docker images -q)
sudo docker system prune
remove processes
sudo docker rm -vf $(sudo docker ps -a -q)
remove images
sudo docker rmi -f $(sudo docker images -a -q)



 docker run -p 9090:8085 --name prep-login --net prep-network -e MYSQL_HOST=mysqldb -e MYSQL_USER=root -e MYSQL_PASSPARD=[agik] -e MYSQL_PORT=3306 prep-login

 docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest
  docker image push registry-host:5000/myadmin/rhel-httpd:latest

===================WORKING========================

  PUSH IMAGE:docker login
 sudo docker tag prep-login:0.1 edvinag73/prep-login
 sudo docker push  edvinag73/prep-login 
 
 products
sudo docker tag prep-products:0.1 edvinag73/prep-products
sudo docker push  edvinag73/prep-products
 
 client
 docker tag client_prepclient edvinag73/prepclient
docker push  edvinag73/prepclient
  

  PULL IMAGE: docker pull edvinag73/prep-login
  
    TAG IMAGE: sudo docker tag prep-products:0.1 edvinag73/prep-products
  PUSH IMAGE: sudo docker push  edvinag73/prep-products

  PULL IMAGE: docker pull edvinag73/prep-products

  RUN IMAGE: docker run -p 8085:8085 edvinag73/prep-login
  RUN IMAGE: docker run -p 8086:8086 edvinag73/prep-products

  REMOVE IMAGE: docker rmi edvinag73/prep-login

  REMOVE IMAGE: docker rmi edvinag73/prep-products

  ============CLIENT============
  to create docker image locally :run in the client dir
  docker-compose up --build 
  docker login --username=edvinag73 --password edvinag73
  sudo docker build  -t prepclient:1.0 .
  sudo docker run -p 8081:80 -t --name prepclient  prepclient:1.0

  RUN client side
  docker pull edvinag73/prepclient
  sudo docker run -p 8081:80 client_prepclient
   docker rmi edvinag73/prepclient

  Run Login
  sudo docker run  edvinag73/prep-login
  
  TAG IMAGE: docker tag client_prepclient edvinag73/prepclient
  PUSH IMAGE: docker push  edvinag73/prepclient

  RUN ALL AT ONCE:
   cd to  dir with file docker-compose.yaml docker-compose up
  ===================================================
  sudo docker-compose up

  ===================KUBERNETES=========
  create kube image: kubectl create deployment concept-prep-login-api --image=edvinag73/prepclient
  expose to outside world: kubectl expose deployment concept-prep-login-api --type=LoadBalancer --port 8081


https://www.youtube.com/watch?v=uIQqxkBOSlE


==========
services:
  mysqldb2:
    container_name: mysqldb_con
    image: mysql
    ports:
      - '3307:3306'
    restart: always
    build:
      context: .
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      #MYSQL_HOST: mysqldb
      MYSQL_USER: root
      MYSQL_PASSWORD: '[agik]'
      MYSQL_PORT: 3306


  prep-products:
    image: edvinag73/prep-products
    mem_reservation: 700m
    ports:
      - 8086:8086
    environment:
      G_DATASOURCE_URL: jdbc:mysql://mysqldbCon:3306/test?autoReconnect=true&useSSL=false
      MYSQL_HOST: mysqldb
      MYSQL_DATABASE: 'test'
      MYSQL_USER: 'root'
      MYSQL_PASSWORD: 'root'
      MYSQL_PORT: '3307'
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka/
      SPRING.ZIPKIN.BASEURL: http://zipkin-server:9411/
      RABBIT_URL: amqp:guest:guest@rabbitmq:5672
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_ZIPKIN_SENDER_TYPE: rabbit

    restart: always
    depends_on:
      - mysqldbCon
      - naming-server
      - rabbitmq
    links:
      - mysqldbCon



  prep-login-service:
    image: edvinag73/prep-login
    #mem_reservation: 700m
    ports:
      - 8085:8085
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/concept_prep?autoReconnect=true&useSSL=false
      MYSQL_HOST: mysqldbCon
      MYSQL_DATABASE: 'test'
      MYSQL_USER: 'root'
      MYSQL_ROOT_PASSWORD: '[agik]'
      MYSQL_PASSWORD: 'root'
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka/
      SPRING.ZIPKIN.BASEURL: http://zipkin-server:9411/
      RABBIT_URL: amqp:guest:guest@rabbitmq:5672
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_ZIPKIN_SENDER_TYPE: rabbitmq
      MYSQL_PORT: '3307'
    restart: always
    depends_on:
      - mysqldbCon
      - naming-server
      - rabbitmq
    networks:
      prep-network:
===============================================
Concept Prep Microservices Design:

Microservice 1;
-user
-roles/levels
-designations;
-logins

microservice 2:
-product categories
-product names
-deleivery location

microservice 3:
-product requests
-product delivery
===============================


